Seminar 3
Obsolete software requirements are requirements that make it in the release planning but are not implemented because of various reasons[1]. 
Or as the author defined it: 
“An obsolete software requirement is a software requirement (implemented or not) that is no longer required for the current release or future releases and, 
for various reasons, has little or no business value for the potential customers or users of a software product.”
As the research suggest these type of requirements can have negative impact in different areas of a project. 
The method that is used to come to the results presented by the authors is a data collection by surveys of practitioners in the industry. 
The interviewees come with experience from different development methodologies. 

In the article the connection between different perspectives that the participants of the survey had and their 
choices is presented clearly and in a way that is easy to relate. For an example one of the research questions had to do with the severity 
of the impact that obsolete requirements have on the project. Here the author makes connection that is based on the data collected. 
The data showed that the developers and the managers had different opinion on the severity of the impact. 
Here the authors connects that the understanding of the severity that these type of requirements have on the project also depend on the size of the company, 
development methodology and if the company had a prepared method to take care of these kind of requirements. 

Another interesting connection is made when the author is analysing the reasons that this phenomenon occurs. Based on the results all type of requirements 
are at risk to become obsolete. However, at the highest risk of becoming obsolete requirements are the ones that are ambiguous, inconsistent or misunderstand. 
Some of the requirements that are low risk to become obsolete are the ones that are related to legislation and law. 

[1]	K. Wnuk, T. Gorschek, and S. Zahda, “Obsolete Software Requirements,” Inf. Softw. Technol., vol. 55, no. 6, p. 921, 2013.

