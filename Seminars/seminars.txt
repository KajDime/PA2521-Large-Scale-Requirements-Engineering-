Seminar 1
Release planning is consistent of two different approaches seen as the art and the science sides of release planning[2]. 
In this article the author presents a methodology of release planning based on algorithm with three different unknowns.  
The algorithm takes in to consideration features composed of requirements with high dependencies. 
Another part is effort prioritising and the last step is prioritising the stakeholders. 
Here the authors wanted to combine a scientific way of presenting decisions that can be confusing and complicated for the human mind to 
consider each separate. 

Each step is clearly described by the author and the article and the idea is easy to follow. 
The authors take in to consideration three factors that are usually at odds with each other. 
We might have interesting features but are either to costly or might be not needed or we might have a need and resources but the feature is unclear or confusing. 
By using this algorithm, we can present features with numerical worth based of the need, complexity and the resources needed to develop. 
Furthermore, the algorithm can suggest which release should include which feature. 
I can see use of this algorithm in the real world. We could involve real stakeholders where they can vote and afterwards we can insert the results of the votes in to our system. 
This will give us realistic presentation of what the stakeholders are interested in. Then we could present to the stakeholders the results so that we can reflect on them. 
The results can be used as leverage when conflict arise. 

From my perspective the mathematical explanations are hard to understand. 
But regardless the explanations provided are easy to understand and the math becomes a little bit not important as long we understand the point that the author is trying to make. 
The author intends the tool to be used as a simulator of different stake holders and then the manager can use the tool to compare his idea to the result of the tool. 
I think that the intended use that the author presents this tool for is short sided. 
Because if you have the stakeholders then the tool can be used by the stakeholders so that they can get better understanding of the dynamic of cost regarding development of software. 
For example, if the stakeholder is not informed some features might be misunderstood as easy or cheap to develop. By using the tool, 
the stakeholder can easily understand why they are wrong when they see the connections and dependencies that that feature has with other features. 

Requirements engineering is affected and has an effect on other phases on the project[3]. 
Here the authors argue that there are many dependent variables regarding measuring of success of the project, requirements engineering project, and product. 
The author presents a way to classify dependencies in different categories. The categories presented in the article are society, project, product, company, and requirements phase. 
All these categories can be directly connected with the measurements of the success.

The article is convincing and claims made by it are backed up by articles. The subject matter is easy to understand and follow. 
I like the idea that success has different meanings when viewed from different perspectives. 
For an example the commercial success of one product might not be directly a success for the company if the company loses money from other projects that were affected by 
the development of that product. Another argument that I found interesting was regarding the improvement of the requirements engineering phase. 
When measuring improvements on small areas the impact that these improvements have on the whole needs to be considered. For an example decreasing the elicitation and documentation 
time might be improvement by itself but might have a negative effect on the project by whole. 
This might lead to unclear requirements and make validation and verification harder to perform and less reliable when performed. 

The study presents problems that are obvious but not easy to notice or recognise if not aware of them. 
It is hard to find real issues with the paper without reviewing all of the presented references. 
However, there might be a bit of confirmation bias in a sense that the article is not a literature review but it is aimed at a specific subject with a lot of arguments
to support its claims. The author chooses articles that support his claims only. 
However, this is not a big problem because the format of the article is such as that this validity threat is obvious and easy to forgive. 
Because of that some arguments might be considered incorrect in certain circumstances. 
We can take the previous example about the commercial success product. 
In that case if that product is the only product that the company owns and the company does not have other projects that can be affected by the product then the statement 
becomes incorrect. That is because the product can’t effect other projects in the way that we described. 
There is still other perspectives that we can take and make similar claim apply in a similar way. That is why this I think that this tread to validity is not a significant one. 
We can apply the teachings of the article and do mental gymnastics and still realise dependent variables where we did not see before. 


Seminar 3
Obsolete software requirements are requirements that make it in the release planning but are not implemented because of various reasons[1]. 
Or as the author defined it: 
“An obsolete software requirement is a software requirement (implemented or not) that is no longer required for the current release or future releases and, 
for various reasons, has little or no business value for the potential customers or users of a software product.”
As the research suggest these type of requirements can have negative impact in different areas of a project. 
The method that is used to come to the results presented by the authors is a data collection by surveys of practitioners in the industry. 
The interviewees come with experience from different development methodologies. 

In the article the connection between different perspectives that the participants of the survey had and their 
choices is presented clearly and in a way that is easy to relate. For an example one of the research questions had to do with the severity 
of the impact that obsolete requirements have on the project. Here the author makes connection that is based on the data collected. 
The data showed that the developers and the managers had different opinion on the severity of the impact. 
Here the authors connects that the understanding of the severity that these type of requirements have on the project also depend on the size of the company, 
development methodology and if the company had a prepared method to take care of these kind of requirements. 

Another interesting connection is made when the author is analysing the reasons that this phenomenon occurs. Based on the results all type of requirements 
are at risk to become obsolete. However, at the highest risk of becoming obsolete requirements are the ones that are ambiguous, inconsistent or misunderstand. 
Some of the requirements that are low risk to become obsolete are the ones that are related to legislation and law. 

There is one critique that I can come up with regarding the type of data that the author is collecting and presenting.
The author collects data via surveys and the questions in the surveys are regarding specific problems.
Then the author presents the collected data which is indication that the problems are occurring. 
Then the author goes on and presents reasoning based on academic articles on what could lead to these problems. 
So what I would like to know is what the professionals think on these matters as well. 
By doing so the author could have present where the academia and the industry don’t see eye to eye. 

[1]	K. Wnuk, T. Gorschek, and S. Zahda, “Obsolete Software Requirements,” Inf. Softw. Technol., vol. 55, no. 6, p. 921, 2013.
[2]	G. Ruhe and M. O. Saliu, “The art and science of software release planning,” IEEE Softw., vol. 22, no. 6, pp. 47–53, 2005.
[3]	T. Gorschek and A. M. Davis, “Requirements engineering: In search of the dependent variables,” Inf. Softw. Technol., vol. 50, no. 1–2, pp. 67–75, Jan. 2008.
